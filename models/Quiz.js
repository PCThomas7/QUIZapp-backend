import mongoose from 'mongoose';

const quizSchema = new mongoose.Schema({
    id: { 
        type: String, 
        required: true,
        unique: true 
    },
    title: { type: String, required: true },
    description: { type: String },
    timeLimit: { type: Number }, // in minutes
    passingScore: { 
        type: Number,
        default: 70
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    metadata: {
        header: { type: [String], default: [] },
        instructions: { type: [String], default: [] },
        footer: { type: [String], default: [] },
        watermark: { type: Object, default: {} }
    },
    sections: [{
        name: { type: String, required: true },
        timerEnabled: { type: Boolean, default: false },
        marks: { type: Number, default: 1 },
        negativeMarks: { type: Number, default: 0 },
        questions: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Question' }],
        isAutogenerated: { type: Boolean, default: false }
    }]
}, { 
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Add virtual for questions that use this quiz
quizSchema.virtual('usedByQuestions', {
    ref: 'QuestionBank',
    localField: '_id',
    foreignField: 'usedInQuizzes'
});

// Add method to get all questions using this quiz
quizSchema.methods.getUsedQuestions = async function() {
    return await this.model('QuestionBank').find({
        usedInQuizzes: this._id
    });
};

// Virtual field for quiz attempts
quizSchema.virtual('attempts', {
    ref: 'QuizAttempt',
    localField: '_id',
    foreignField: 'quiz'
});

// Add methods to get quiz statistics
quizSchema.methods.getAttemptStats = async function() {
    const attempts = await this.model('QuizAttempt').find({ quiz: this._id });
    
    return {
        totalAttempts: attempts.length,
        averageScore: attempts.reduce((acc, curr) => acc + curr.score, 0) / attempts.length || 0,
        highestScore: Math.max(...attempts.map(a => a.score), 0),
        completedAttempts: attempts.filter(a => a.completed).length
    };
};

const Quiz = mongoose.model('Quiz', quizSchema);

export default Quiz;
