import mongoose from 'mongoose';

// Add these fields to your Quiz schema
const quizSchema = new mongoose.Schema({
    id: { 
        type: String, 
        required: true,
        unique: true 
    },
    title: { type: String, required: true },
    description: { type: String },
    timeLimit: { type: Number }, // in minutes
    passingScore: { 
        type: Number,
        default: 70
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    // Add batch assignment configuration
    batchAssignment: {
        type: String,
        enum: ['NONE', 'ALL', 'SPECIFIC'],
        default: 'NONE'
    },
    isScheduled: {
        type: Boolean,
        default: false
      },
      startDate: {
        type: Date,
        required: function() {
          return this.isScheduled;
        }
      },
      endDate: {
        type: Date,
        required: function() {
          return this.isScheduled;
        }
      },
      calendarEventId: {
        type: String,
        required: false
      },
    metadata: {
        header: { type: [String], default: [] },
        instructions: { type: [String], default: [] },
        footer: { type: [String], default: [] },
        watermark: { type: Object, default: {} }
    },
    sections: [{
        name: { type: String, required: true },
        timerEnabled: { type: Boolean, default: false },
        marks: { type: Number, default: 1 },
        negativeMarks: { type: Number, default: 0 },
        questions: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Question' }],
        isAutogenerated: { type: Boolean, default: false }
<<<<<<< HEAD
    }],
    isScheduled: { 
        type: Boolean, 
        default: false 
    },
    startDate: { 
        type: Date 
    },
    endDate: { 
        type: Date 
    },
}, { 
=======
    }]
},
 { 
>>>>>>> 09d2e22c13d4db1fea36ef36122cea586343a6b9
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Add virtual for questions that use this quiz
quizSchema.virtual('usedByQuestions', {
    ref: 'QuestionBank',
    localField: '_id',
    foreignField: 'usedInQuizzes'
});

// Add method to get all questions using this quiz
quizSchema.methods.getUsedQuestions = async function() {
    return await this.model('QuestionBank').find({
        usedInQuizzes: this._id
    });
};

// Virtual field for quiz attempts
quizSchema.virtual('attempts', {
    ref: 'QuizAttempt',
    localField: '_id',
    foreignField: 'quiz'
});

// Add methods to get quiz statistics
quizSchema.methods.getAttemptStats = async function() {
    const attempts = await this.model('QuizAttempt').find({ quiz: this._id });
    
    return {
        totalAttempts: attempts.length,
        averageScore: attempts.reduce((acc, curr) => acc + curr.score, 0) / attempts.length || 0,
        highestScore: Math.max(...attempts.map(a => a.score), 0),
        completedAttempts: attempts.filter(a => a.completed).length
    };
};

// Add virtual for assigned batches
quizSchema.virtual('assignedBatches', {
    ref: 'QuizBatch',
    localField: '_id',
    foreignField: 'quiz'
});

// Add method to get assigned batches
quizSchema.methods.getAssignedBatches = async function() {
    if (this.batchAssignment === 'ALL') {
        return await this.model('Batch').find({ active: true });
    } else if (this.batchAssignment === 'SPECIFIC') {
        const assignments = await this.model('QuizBatch').find({ quiz: this._id }).populate('batch');
        return assignments.map(assignment => assignment.batch);
    }
    return [];
};

// Add method to assign batches
quizSchema.methods.assignBatches = async function(batchIds) {
    // First, remove existing assignments
    await this.model('QuizBatch').deleteMany({ quiz: this._id });
    
    if (!batchIds || batchIds.length === 0) {
        this.batchAssignment = 'NONE';
    } else if (batchIds === 'ALL') {
        this.batchAssignment = 'ALL';
    } else {
        this.batchAssignment = 'SPECIFIC';
        // Create new assignments
        await Promise.all(batchIds.map(batchId => 
            this.model('QuizBatch').create({
                quiz: this._id,
                batch: batchId
            })
        ));
    }
    await this.save();
};

const Quiz = mongoose.model('Quiz', quizSchema);

export default Quiz;
